// <auto-generated />
using System;
using HamburgerAppMVC.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HamburgerAppMVC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240613085709_ExtraMaterialSeedDataSC01")]
    partial class ExtraMaterialSeedDataSC01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "İçecek",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Tatlı",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Patates",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Sos",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Çıtır Lezzet",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.ExtraDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExtraMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraMaterialId");

                    b.HasIndex("OrderId");

                    b.ToTable("ExtraDetails");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.ExtraMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraMaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ExtraMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ExtraMaterialName = "Coca - Cola Zero Sugar",
                            IsActive = true,
                            PictureName = "coca_cola_zero_sugar_33_cl_baf77227e6.jpg",
                            Price = 35.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ExtraMaterialName = "Berry Hibiscus",
                            IsActive = true,
                            PictureName = "bk_berry_hibiscus_a1140aad64.jpg",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ExtraMaterialName = "Muffin",
                            IsActive = true,
                            PictureName = "muffin_3b7b7511f1.jpg",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ExtraMaterialName = "Çikolatalı Sufle",
                            IsActive = true,
                            PictureName = "cikolatali_sufle_a142511990.jpg",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            ExtraMaterialName = "Ketçap",
                            IsActive = true,
                            PictureName = "ketcap_32f8f33054.jpg",
                            Price = 5.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            ExtraMaterialName = "Çıtır Çıtır Atıştır",
                            IsActive = true,
                            PictureName = "citir_citir_atistir_d0153d6c4e.jpg",
                            Price = 60.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            ExtraMaterialName = "Buffalo Sos",
                            IsActive = true,
                            PictureName = "buffalo_sos_83b747af5c.jpg",
                            Price = 6.0
                        });
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Menu1",
                            IsActive = true,
                            MenuName = "Menu1",
                            PictureName = "menu1.jpg",
                            Price = 100.0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Menu2",
                            IsActive = true,
                            MenuName = "Menu2",
                            PictureName = "menu1.jpg",
                            Price = 200.0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Menu3",
                            IsActive = true,
                            MenuName = "Menu3",
                            PictureName = "menu1.jpg",
                            Price = 300.0
                        });
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.MenuDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("MenuDetails");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66A51954-D206-4000-9F81-F73FE061B52D",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "645469f3-8e32-4ce1-a0ec-2f99c2393599",
                            Email = "kullanici@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Kullanici Name",
                            NormalizedEmail = "KULLANICI@GMAIL.COM",
                            NormalizedUserName = "KULLANICI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxaUcQBXHjUxxAfHVSITSYFV7tkSgf4S1YEeppkOo0al0WcB7QNhp7YKFJzZMTN+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17cca19e-3e4c-4e27-bf91-b6972db0a62a",
                            Surname = "Kullanici Surname",
                            TwoFactorEnabled = false,
                            UserName = "kullanici@gmail.com"
                        },
                        new
                        {
                            Id = "031A45EF-18ED-4BBC-80E5-D0E6FE65908C",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ea54aea-5071-4de7-9ff7-142a27a3764a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxaUcQBXHjUxxAfHVSITSYFV7tkSgf4S1YEeppkOo0al0WcB7QNhp7YKFJzZMTN+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "613de9ce-57e3-43fe-af79-39a65714a5d5",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0087A671-1000-4248-9CEC-7CD8AB56940E",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "D5F1417F-1535-463F-9269-5115D442F26D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "031A45EF-18ED-4BBC-80E5-D0E6FE65908C",
                            RoleId = "0087A671-1000-4248-9CEC-7CD8AB56940E"
                        },
                        new
                        {
                            UserId = "66A51954-D206-4000-9F81-F73FE061B52D",
                            RoleId = "D5F1417F-1535-463F-9269-5115D442F26D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.ExtraDetail", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.ExtraMaterial", "ExtraMaterial")
                        .WithMany()
                        .HasForeignKey("ExtraMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Order", "Order")
                        .WithMany("ExtraDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraMaterial");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.ExtraMaterial", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.MenuDetail", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Order", "Order")
                        .WithMany("MenuDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Order", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HamburgerAppMVC.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.Entities.Concrete.Order", b =>
                {
                    b.Navigation("ExtraDetails");

                    b.Navigation("MenuDetails");
                });

            modelBuilder.Entity("HamburgerAppMVC.Areas.Identity.Data.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
